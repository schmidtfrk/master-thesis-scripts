from bsm_lib import *


#counting best information formations for the steane code without photon loss
counter=0
for j in itertools.product('xyz',repeat=7):
        data=general_safe_bm([[1,1,0,1,0,0,1],[0,1,0,1,0,1,0],[1,0,0,1,1,0,0],
                        [1,1,1,0,0,0,0]],[[1,0,1,0,1,0,1],[0,1,1,0,0,1,1],
                        [0,0,0,1,1,1,1]],[1]*7,[[1,1,0,1,0,0,1],[0,1,0,1,0,1,0]
                        ,[1,0,0,1,1,0,0],[1,1,1,0,0,0,0]],[[1,0,1,0,1,0,1],
                        [0,1,1,0,0,1,1],[0,0,0,1,1,1,1]],[1]*7,j,[0]*7)
        if data==248:
            print(j)
            counter+=1
print(counter)

#looking for differences between various XX=1 or ZZ=1 formation using surface(2,2) in the no photon loss case
infos=list(span_generator_mod2(ones(5)))
results=[]
measurements=[]
for i in infos:
    for j in infos:
        data=bsm_prob_mix([[0, 1, 0, 0, 1], [0, 0, 1, 1, 1], [1, 1, 1, 0, 0]],[[1, 0, 1, 1, 0], [0, 1, 1, 0, 1]],[1,1,0,0,0],
                              [[1, 0, 1, 1, 0], [0, 1, 1,0, 1], [1, 1, 0, 0, 0]],[[1, 1, 1, 0, 0], [0, 0, 1, 1, 1]],[1,0,0,1,0],i,j)
        if data not in results:
            results.append(data)
            measurements.append(i)
print(results)
print(measurements)


#performance of surface(2,2) when considering different information formations  in the case of photon loss
print(general_safe_bm_erasure([[0, 1, 0, 0, 1], [0, 0, 1, 1, 1], [1, 1, 1, 0, 0]],[[1, 0, 1, 1, 0], [0, 1, 1, 0, 1]],[1,1,0,0,0],
                              [[1, 0, 1, 1, 0], [0, 1, 1,0, 1], [1, 1, 0, 0, 0]],[[1, 1, 1, 0, 0], [0, 0, 1, 1, 1]],[1,0,0,1,0],['z']*5,[1]*5))
print(general_safe_bm_erasure([[0, 1, 0, 0, 1], [0, 0, 1, 1, 1], [1, 1, 1, 0, 0]],[[1, 0, 1, 1, 0], [0, 1, 1, 0, 1]],[1,1,0,0,0],
                              [[1, 0, 1, 1, 0], [0, 1, 1,0, 1], [1, 1, 0, 0, 0]],[[1, 1, 1, 0, 0], [0, 0, 1, 1, 1]],[1,0,0,1,0],['x','z','z','z','x'],[1]*5))
print(general_safe_bm_erasure([[0, 1, 0, 0, 1], [0, 0, 1, 1, 1], [1, 1, 1, 0, 0]],[[1, 0, 1, 1, 0], [0, 1, 1, 0, 1]],[1,1,0,0,0],
                              [[1, 0, 1, 1, 0], [0, 1, 1,0, 1], [1, 1, 0, 0, 0]],[[1, 1, 1, 0, 0], [0, 0, 1, 1, 1]],[1,0,0,1,0],['x','z','y','z','x'],[1]*5))


#surface (2,3)  [496, 2720, 5144, 3648, 768, 0, 0, 0, 0]
print(bsm_mix_erasure([[0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 1, 
  1, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0]],[[1, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 
  1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1]],[1,1,0,0,0,0,0,0],[[1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 0], [1, 0, 1, 0, 1, 
  0, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0]],[[1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 
  1, 1, 1]],[1,0,0,1,0,0,1,0],[1,0,1,0,1,1,1,0]))

#surface (3,2) [496, 2720, 5144, 3648, 768, 0, 0, 0, 0]
print(bsm_mix_erasure([[0, 0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 
  1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0]],[[1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 
  0, 0, 1]],[1,1,1,0,0,0,0,0],[[1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 
  1, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0]],[[1, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 
  1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1]],[1,0,0,0,0,1,0,0],[1, 0, 1, 0, 0, 0, 1, 0]))
#no difference in the performence between surface (3,2) and surface(2,3) if the safe information formation is adjusted
